/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Voting {
  export type ProposalStruct = {
    callData: BytesLike;
    recipient: string;
    description: string;
    finishDate: BigNumberish;
    votesFor: BigNumberish;
    votesAgainst: BigNumberish;
  };

  export type ProposalStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    callData: string;
    recipient: string;
    description: string;
    finishDate: number;
    votesFor: BigNumber;
    votesAgainst: BigNumber;
  };

  export type UserDataStruct = {
    balance: BigNumberish;
    lastFinishDate: BigNumberish;
  };

  export type UserDataStructOutput = [BigNumber, number] & {
    balance: BigNumber;
    lastFinishDate: number;
  };
}

export interface VotingInterface extends utils.Interface {
  functions: {
    "CHAIRMAN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addProposal(bytes,address,string)": FunctionFragment;
    "debatingPeriodDuration()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "finishProposal(uint64)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "minimumQuorum()": FunctionFragment;
    "proposal(uint64)": FunctionFragment;
    "proposalsCount()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "user(address)": FunctionFragment;
    "vote(uint64,bool)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHAIRMAN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "addProposal"
      | "debatingPeriodDuration"
      | "deposit"
      | "finishProposal"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "minimumQuorum"
      | "proposal"
      | "proposalsCount"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "user"
      | "vote"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHAIRMAN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProposal",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debatingPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "user", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHAIRMAN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debatingPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ProposalAccepted(uint64,uint256,uint256,bytes)": EventFragment;
    "ProposalDeclined(uint64,uint256,uint256)": EventFragment;
    "ProposalFailed(uint64)": EventFragment;
    "ProposalVotingStarted(uint64,bytes,address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVotingStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ProposalAcceptedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
  funcResult: string;
}
export type ProposalAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  ProposalAcceptedEventObject
>;

export type ProposalAcceptedEventFilter =
  TypedEventFilter<ProposalAcceptedEvent>;

export interface ProposalDeclinedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
}
export type ProposalDeclinedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ProposalDeclinedEventObject
>;

export type ProposalDeclinedEventFilter =
  TypedEventFilter<ProposalDeclinedEvent>;

export interface ProposalFailedEventObject {
  proposalId: BigNumber;
}
export type ProposalFailedEvent = TypedEvent<
  [BigNumber],
  ProposalFailedEventObject
>;

export type ProposalFailedEventFilter = TypedEventFilter<ProposalFailedEvent>;

export interface ProposalVotingStartedEventObject {
  proposalId: BigNumber;
  callData: string;
  recipient: string;
  description: string;
}
export type ProposalVotingStartedEvent = TypedEvent<
  [BigNumber, string, string, string],
  ProposalVotingStartedEventObject
>;

export type ProposalVotingStartedEventFilter =
  TypedEventFilter<ProposalVotingStartedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHAIRMAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addProposal(
      callData: BytesLike,
      recipient: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debatingPeriodDuration(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Voting.ProposalStructOutput]>;

    proposalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    user(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[Voting.UserDataStructOutput]>;

    vote(
      proposalId: BigNumberish,
      isFor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHAIRMAN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addProposal(
    callData: BytesLike,
    recipient: string,
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debatingPeriodDuration(overrides?: CallOverrides): Promise<number>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  proposal(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Voting.ProposalStructOutput>;

  proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  user(
    addr: string,
    overrides?: CallOverrides
  ): Promise<Voting.UserDataStructOutput>;

  vote(
    proposalId: BigNumberish,
    isFor: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHAIRMAN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addProposal(
      callData: BytesLike,
      recipient: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    debatingPeriodDuration(overrides?: CallOverrides): Promise<number>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    finishProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Voting.ProposalStructOutput>;

    proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    user(
      addr: string,
      overrides?: CallOverrides
    ): Promise<Voting.UserDataStructOutput>;

    vote(
      proposalId: BigNumberish,
      isFor: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ProposalAccepted(uint64,uint256,uint256,bytes)"(
      proposalId?: null,
      votesFor?: null,
      votesAgainst?: null,
      funcResult?: null
    ): ProposalAcceptedEventFilter;
    ProposalAccepted(
      proposalId?: null,
      votesFor?: null,
      votesAgainst?: null,
      funcResult?: null
    ): ProposalAcceptedEventFilter;

    "ProposalDeclined(uint64,uint256,uint256)"(
      proposalId?: null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalDeclinedEventFilter;
    ProposalDeclined(
      proposalId?: null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalDeclinedEventFilter;

    "ProposalFailed(uint64)"(proposalId?: null): ProposalFailedEventFilter;
    ProposalFailed(proposalId?: null): ProposalFailedEventFilter;

    "ProposalVotingStarted(uint64,bytes,address,string)"(
      proposalId?: null,
      callData?: null,
      recipient?: null,
      description?: null
    ): ProposalVotingStartedEventFilter;
    ProposalVotingStarted(
      proposalId?: null,
      callData?: null,
      recipient?: null,
      description?: null
    ): ProposalVotingStartedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    CHAIRMAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addProposal(
      callData: BytesLike,
      recipient: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debatingPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      isFor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAIRMAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addProposal(
      callData: BytesLike,
      recipient: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debatingPeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      isFor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
